/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.Carrera;
import Modelo.Encuesta;
import Modelo.Pregunta;
import Modelo.ResultadosTabla;
import Modelo.TablaDiagnostico;
import controlador.GeneradorReporte;
import controlador.Propiedades;
import controlador.XmlActions;
import java.io.File;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author Yael_
 */
public class verReportes extends javax.swing.JFrame {

    /**
     * Creates new form verReportes
     */
    XmlActions xml = new XmlActions();
    Propiedades prop = new Propiedades();

    int xmouse, ymouse;
    int tam = 0;
    float promedios[];
    double promedio = 0;
    boolean banderaComparacion = false;
    int preguntasDobles = 0, aumentosAltos = 0, aumentosComparacion = 0;
    private double valorParcial;
    boolean graficoHecho = false;

    List<Carrera> carreras = new ArrayList();
    List<Encuesta> encuestas = new ArrayList();
    List<TablaDiagnostico> listaTablaDiagnostico = new ArrayList();
    List<ResultadosTabla> resultados = new ArrayList();
    List<Pregunta> preguntas = new ArrayList();

    private String carrera, area, tituloPantalla, nombreAreaBien, carpeta, comentarios = "", comparacion, carpetaAnterior;
    private String recomendacionesAux, diagnosticoAux, activoAux;
    String rutaXml = "src/Documentos/";

    public verReportes(String carpeta) {
        this.carpeta = carpeta;
        ImageIcon iconoT = new ImageIcon("src/Archivos/favicon.png");
        this.setIconImage(iconoT.getImage());
        initComponents();
        setLocationRelativeTo(null);
        jLabel1.setText(jLabel1.getText() + " " + carpeta);
        carreras = xml.loadCarrerasDataFromFile(new File("src/Documentos/carreras.xml"));
        tam = carreras.size();
        llenarCarreras();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 53, 153));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel3MouseDragged(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BtnAtras.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 66));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REPORTE DEL PERIODO:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 930, 66));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.setBackground(new java.awt.Color(248, 248, 255));

        jLabel4.setText("SELECCIONA UN SERVICIO");

        jLabel5.setText("SELECCIONA UNA CARRERA");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CENTRO DE INFORMACION", "COORDINACION DE CARRERAS", "RECURSOS FINANCIEROS", "CENTRO DE COMPUTO", "SERVICIO SOCIAL", "SERVICIOS ESCOLARES", "RESIDENCIAS PROFESIONALES" }));

        jButton1.setText("GENERAR REPORTE");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel4))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton1)))
                .addContainerGap(361, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jLabel5)
                .addGap(32, 32, 32)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jButton1)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1000, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void llenarCarreras() {
        jComboBox1.removeAll();
        for (int i = 0; i < tam; i++) {
            String aux = carreras.get(i).getNombre();
            jComboBox1.addItem(aux);
        }
    }
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        REPORTES obj = new REPORTES();
        obj.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jPanel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xmouse, y - ymouse);
    }//GEN-LAST:event_jPanel3MouseDragged

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        // TODO add your handling code here:
        xmouse = evt.getX();
        ymouse = evt.getY();
    }//GEN-LAST:event_jPanel3MousePressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        carrera = jComboBox1.getSelectedItem().toString();
        area = getClave(jComboBox2.getSelectedItem().toString());
        llenarDatos();
    }//GEN-LAST:event_jButton1MouseClicked

    public String getClave(String servicio) {
        String clave = "";
        switch (servicio) {
            case "CENTRO DE INFORMACION":
                clave = "Centro";
                tituloPantalla="CENTRO DE INFORMACION";
                activoAux = "centroInformacionActivo";
                break;
            case "COORDINACION DE CARRERAS":
                clave = "Coordinacion";
                tituloPantalla="COORDINACION DE CARRERAS";
                activoAux = "coordinacionCarrerasActivo";
                break;
            case "RECURSOS FINANCIEROS":
                clave = "Financieros";
                tituloPantalla="RECURSOS FINANCIEROS";
                activoAux = "recursosFinancierosActivo";
                break;
            case "CENTRO DE COMPUTO":
                clave = "Computo";
                tituloPantalla="CENTRO DE COMPUTO";
                activoAux = "computoActivo";
                break;
            case "SERVICIO SOCIAL":
                clave = "Social";
                tituloPantalla="SERVICIO SOCIAL";
                activoAux = "servicioSocialActivo";
                break;
            case "SERVICIOS ESCOLARES":
                clave = "Escolares";
                tituloPantalla="SERVICIOS ESCOLARES";
                activoAux = "serviciosEscolaresActivo";
                break;
            case "RESIDENCIAS PROFESIONALES":
                clave = "Residencias";
                tituloPantalla="RESIDENCIAS PROFESIONALES";
                activoAux = "residenciaProfesionalActivo";
                break;
        }
        return clave;
    }

    public void llenarDatos() {
        System.out.println("carrera " + carrera);
        System.out.println("clave " + area);
        System.out.println(area + "Activo");
        String activo = prop.acceder(activoAux, rutaXml + "Periodos/" + carpeta + "/Periodo.properties");
        if (activo.equals("si")) {
            nombreAreaBien = prop.acceder("archivo" + area, rutaXml + "ajustesAreas.properties");
            System.out.println("nombre area bien " + nombreAreaBien);
            System.out.println(nombreAreaBien + "\n" + carpeta);
            loadrecomendaciones();
            preguntas = xml.loadPreguntasDataFromFile(new File(rutaXml + nombreAreaBien + ".xml"));
            encuestas = xml.loadEncuestasDataFromFile(new File(rutaXml + "Periodos/" + carpeta + "/" + carrera.trim() + "/" + nombreAreaBien + "Encuestas.xml"));
            System.out.println("Numero de preguntas: " + preguntas.size());
            System.out.println("Numero de encuestas: " + encuestas.size());
            ResultadosTabla respuestasCondensadas[] = new ResultadosTabla[preguntas.size()];

            for (int i = 0; i < respuestasCondensadas.length; i++) {
                respuestasCondensadas[i] = new ResultadosTabla(i + 1);
            }

            int numeracion = 1;
            for (int i = 0; i < encuestas.size(); i++) {
                Encuesta encuesta = encuestas.get(i);
                for (int j = 0; j < preguntas.size(); j++) {
                    int respuesta = Integer.parseInt(encuesta.getRespuesta(j).getRespuesta());
                    switch (respuesta) {
                        case 1:
                            respuestasCondensadas[j].setNoCalificacionUno(respuestasCondensadas[j].getNoCalificacionUno() + 1);
                            break;
                        case 2:
                            respuestasCondensadas[j].setNoCalificacionDos(respuestasCondensadas[j].getNoCalificacionDos() + 1);
                            break;
                        case 3:
                            respuestasCondensadas[j].setNoCalificacionTres(respuestasCondensadas[j].getNoCalificacionTres() + 1);
                            break;
                        case 4:
                            respuestasCondensadas[j].setNoCalificacionCuatro(respuestasCondensadas[j].getNoCalificacionCuatro() + 1);
                            break;
                        case 5:
                            respuestasCondensadas[j].setNoCalificacionCinco(respuestasCondensadas[j].getNoCalificacionCinco() + 1);
                            break;
                    }
                }
                if (!encuesta.getComentario().isEmpty()) {
                    comentarios += /*"• "*/ (numeracion++) + ". " + encuesta.getComentario() + "\n";
                }

            }
            promedios = new float[respuestasCondensadas.length];
            for (int i = 0; i < respuestasCondensadas.length; i++) {
                System.out.println("Pregunta " + i + ": respuestas con 1=" + respuestasCondensadas[i].getNoCalificacionUno()
                        + ": respuestas con 2=" + respuestasCondensadas[i].getNoCalificacionDos()
                        + ": respuestas con 3=" + respuestasCondensadas[i].getNoCalificacionTres()
                        + ": respuestas con 4=" + respuestasCondensadas[i].getNoCalificacionCuatro()
                        + ": respuestas con 5=" + respuestasCondensadas[i].getNoCalificacionCinco());
                ResultadosTabla resultado = new ResultadosTabla(i + 1, respuestasCondensadas[i].getNoCalificacionUno(), respuestasCondensadas[i].getNoCalificacionDos(), respuestasCondensadas[i].getNoCalificacionTres(), respuestasCondensadas[i].getNoCalificacionCuatro(), respuestasCondensadas[i].getNoCalificacionCinco());
                promedio += resultado.getPromedio();
                promedios[i] = (float) resultado.getPromedio();

                prop.guardar("promedioPregunta" + (i + 1) + area, String.format("%.2f", resultado.getPromedio()), rutaXml + "Periodos/" + carpeta + "/" + carrera.trim() + "/PeriodoCarrera.properties");
                resultados.add(resultado);
            }
            valorParcial = promedio;
            BigDecimal bd = new BigDecimal(valorParcial).setScale(2, RoundingMode.HALF_UP);
            promedio = bd.doubleValue();

            promedio = promedio / resultados.size();
            //cargando promedios anteriores
            carpetaAnterior = prop.acceder("archivoAnterior", rutaXml + "Periodos/" + carpeta + "/Periodo.properties");
            System.out.println("Carpeta anterior: " + carpetaAnterior);

            for (int i = 0; i < preguntas.size(); i++) {
                String promedioPreguntaAnterior = prop.acceder("promedioPregunta" + (i + 1) + area, rutaXml + "Periodos/" + carpetaAnterior + "/" + carrera + "/PeriodoCarrera.properties");
                System.out.println("Promedio Pregunta Anterior: " + promedioPreguntaAnterior + "\nCarrera: " + carrera);
                String pregunta = (i + 1) + ". " + preguntas.get(i).getPreg();
                if (pregunta.length() > 80) {
                    String palabras[] = pregunta.split(" ");
                    String preguntaFormateada = "", auxiliarPregunta = "";
                    for (int j = 0; j < palabras.length; j++) {
                        String palabra = palabras[j];
                        if ((auxiliarPregunta.length() + palabra.length()) < 80) {
                            auxiliarPregunta += palabra + " ";
                        } else {
                            preguntaFormateada += auxiliarPregunta + "\n";
                            auxiliarPregunta = palabra + " ";
                            aumentosAltos++;
                        }
                    }
                    preguntaFormateada += auxiliarPregunta;
                    System.out.println(preguntaFormateada);
                    pregunta = preguntaFormateada;
                    preguntasDobles++;
                }
                //ARRAYLIST SE LLENA LA TABLA DIAGNOSTICO :)
                listaTablaDiagnostico.add(new TablaDiagnostico(promedioPreguntaAnterior, resultados.get(i).getPromedio() + "", pregunta));
            }
            comparacion = prop.acceder("comparacion" + area, rutaXml + "Periodos/" + carpeta + "/" + carrera + "/PeriodoCarrera.properties");
            System.out.println("valor inicial de comparacion " + comparacion);
            if (!comparacion.equals("sincomparacion")) {
                System.out.println("EXISTE COMPARACION");
                banderaComparacion = true;
                diagnosticoAux = comparacion;
                listaTablaDiagnostico.add(new TablaDiagnostico(prop.acceder("promedioEncuestas" + area, rutaXml + "Periodos/" + carpetaAnterior + "/" + carrera + "/PeriodoCarrera.properties"), String.format("%.2f", promedio), diagnosticoAux));
            } else {
                listaTablaDiagnostico.add(new TablaDiagnostico(prop.acceder("promedioEncuestas" + area, rutaXml + "Periodos/" + carpetaAnterior + "/" + carrera + "/PeriodoCarrera.properties"), String.format("%.2f", promedio), ""));
            }

            jButton1.setEnabled(false);
            jButton1.enable(false);
            JOptionPane pane = new JOptionPane("Generando reporte, espere unos segundos.", JOptionPane.INFORMATION_MESSAGE);
            JDialog dialog = pane.createDialog(null, "Generando reporte, espere unos segundos.");
            dialog.setModal(false);

            Thread t = new Thread(new Runnable() {
                public void run() {

                    Thread t = new Thread(new Runnable() {
                        public void run() {
                            dialog.setVisible(true);
                        }
                    });
                    t.start();

                    GeneradorReporte genera = new GeneradorReporte();
                    genera.generar(resultados, promedio, promedios, comentarios, preguntas, area, recomendacionesAux, carrera, tituloPantalla, diagnosticoAux, listaTablaDiagnostico, graficoHecho);
                    graficoHecho = true;

                    jButton1.setEnabled(true);
                    jButton1.enable(true);
                    dialog.setVisible(false);

                }
            });
            t.start();

        } else {
            System.out.println("el servicio no esta activo");
            JOptionPane.showMessageDialog(null, "Durante el periodo no se utilizo este servicio, por lo tanto no existe un reporte almacenado.");
        }

    }

    public void loadrecomendaciones() {
        File archivoXml = new File(rutaXml + "Periodos/" + carpeta + "/" + carrera.trim() + "/" + nombreAreaBien + "Encuestas.xml");
        String recomendaciones = xml.loadRecomendacionDataFromFile(archivoXml);
        if (recomendaciones == null) {
            recomendacionesAux = "";
            System.out.println("nose ha obtenido nada");
        } else {
            recomendacionesAux = recomendaciones;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(verReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(verReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(verReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(verReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new verReportes("testing").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
